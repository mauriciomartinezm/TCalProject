<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        R0lGODlhLAGqAIEAAAAAAAAAAAAAAAAAACH/C05FVFNDQVBFMi4wAwEBAAAh+QQBAAAAACwAAAAALAGq
        AAAI/wABCBxIsKDBgwgTKlzIsKHDhxAjSpxIsaLFixgtBtjIkWPGjyBDihxJsqTJkR1TbjzJsqXLlzBj
        ogxw0KPMmzhz6tz5cWVNmjyDCh1K9KZPg0eLKl3KtOnDpAShOp1KtapQqQCwWt3KtWtJlSm9ih1L9iLY
        jmXTql378ydQtnDjdtWa9a3cu3iV0qWbt6/fl3vt/h1M+GTgwogTi9TKV7HjxwvPooVMuXJkyZYza97M
        ubPnz6BDix5NurTp06hTq17NurXr17Bjy55Nu7ZRwbZz5wyru7dMsL6Dt1ypUrjxmQOLH19uVrBy5tAh
        Yn0evXrCwLyta0+OuyDw7dobcw2fDB66+KjZyxs/7z29//re7JG6f187vlvy9GfbR/g9f+z9ClHnH2sA
        XobfgKkVyJCACJamYEMMNhjagw5FKGFnFD5l4YWWZSjdhhw+5qFEIIaI2IgTlWjiXyhSpOKKeLVY0Ysw
        wiWjRjTWWNaNzc2no43dBZXjj1vxCNKQRE5lZEhIJrnUkov56KRVUM504JRVVUlSf1gqGSRVXO52JZZa
        stRkT2GS+SVXZ+Jol01d1gXkmF/hVuZyd8LUZkZ5rrcmWXumSCeRff4W6IJpOlnobVL2+NaivkGK06Ht
        yRenQJKKOWhEUmWam6eawjnjUZvqCKpOh2J26ak7JVohnKzKFmurlF6KHme12jrrUAu5drkrUb0q+mdl
        wdv++OuTjU4p5bFMuUpohMw25SyMsHY67GfFMieqnJUSmKyE7EVb5LcDhnstadnCd664Xk37nrn1pavf
        uueqJi9s21obKbnVJbUtt/uW2i+09b52r7f/YlowvvzSx25e7r678LwNhzdxvAJbrN7BrT2cGMf2Xhxw
        wtZ5LCLI6IrsZ8Wfqowny7SZrBnKGLocHc0z2zxwxv/pXDLMq8k8Ic6KCS1axEH7LDHPpxltGtF+Od00
        0NgqjSDUckkdMtOeaZ001cRaHSLSm3ltMNhFi10j1nOpbSrag5kdM9z/fcmNMddxu60s28jayiTda9kd
        HN9X6e034bT6bRLikxquuMJ4pyX4zYy7NPnOkbf9eEyV17m5oZmD6fjn1wFe1OUOm1446ah2jiPrtKre
        OOxCys756LRrGHrrufNqu5m49/5hxlij/vagkgWPXvLMN+/889BHL/301Fdv/fXYJy+fnX1m7/334Icv
        /vjkY99ekMYLv+Wa6at/pPLuxwh//FnPTz+Q94fcuP3588k/5P3TXIDURpz/UcmAR2MfAWnSPjT5h2Q3
        8gjJOoTABHJvgdwBTQPVor0oZbBqkKtg136nsG7VrC67M5ZzRNisarHwZSbEFVQmqKsOyrAtsGPeAghx
        O0i6hNHQMdN54eC+tEEXdaeIZSOiEH3Hw801BomcmuES1XUZGZIKigEUFAp/mMWThbCLYAyjGMfYmYAA
        ADs=
</value>
  </data>
  <data name="textBox1.Text" xml:space="preserve">
    <value>1.Ningún cateto puede ser mayor a la hipotenusa, de lo contrario, aparecerá un error llamado 'NaN'
2.La suma del ángulo B y C no puede ser mayor a 90°, de lo contrario, el programa arrojará resultados erróneos.</value>
  </data>
</root>